name: CD

on:
  workflow_run:
    workflows: [ "CI" ] # Triggered after CI completes
    types:
      - completed

  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.2.3)"
        required: true
        type: string

permissions:
  contents: write

jobs:
  package_version_release_deploy:
    name: Package, Version, and Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Only run if CI was successful or manual dispatch
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update build number
        id: update_build_number
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          echo "Setting build number to ${{ github.run_number }}"
          echo "${{ github.run_number }}" > BUILD
          git add BUILD
          git commit -m "Update BUILD file to ${{ github.run_number }} [skip ci]"
          git push origin HEAD:refs/heads/master

      # Determine the version (if manual input is provided)
      - name: Set version
        id: set_version
        run: |
          if [ "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Setting version to $VERSION"
            echo "$VERSION" > VERSION
          
            git fetch --tags
            if [ -n "$(git status --porcelain)" ]; then
              git add VERSION
              git commit -m "Update VERSION file to ${VERSION} [skip ci]"
              git push origin HEAD:refs/heads/master
              git tag v$VERSION
              git push origin v$VERSION --force
            else
              echo "No changes to commit"
            fi
          else
            VERSION=$(cat VERSION || echo "0.0.0")
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Get release tags
      - name: Get previous release tag
        id: get_previous_release
        if: ${{ github.event.inputs.version != '' }}
        run: |
          git fetch --all
          git fetch --tags --force
          # Get the latest tag
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          
          # Get the previous tag
          PREVIOUS_TAG=$(git tag --sort=version:refname | grep -B 1 "$LATEST_TAG" | head -n 1)
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV

      # Get commits since the last release
      - name: Get commits
        id: get_commits
        if: ${{ github.event.inputs.version != '' }}
        run: |
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found. Showing all commits."
            COMMITS=$(git log --pretty=format:"- %h (%ad): %s" --date=short)
          elif [ "$PREVIOUS_TAG" == "$LATEST_TAG" ]; then
            echo "Previous and latest tags are the same. Showing all commits."
            COMMITS=$(git log --pretty=format:"- %h (%ad): %s" --date=short)
          else
            echo "Fetching commits between $PREVIOUS_TAG and $LATEST_TAG."
            COMMITS=$(git log $PREVIOUS_TAG..$LATEST_TAG --pretty=format:"- %h (%ad): %s" --date=short)
          fi
          if [ -z "$COMMITS" ]; then
            COMMITS="No commits found since the last release."
          fi
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Create a tar.gz package
      - name: Package the repository
        run: |
          mkdir -p artifacts
          tar -czvf artifacts/zhub-build-${{ github.run_number }}.tar.gz --exclude='artifacts' --exclude='.git*' -C . .
          file artifacts/zhub-build-${{ github.run_number }}.tar.gz
          if [ "${{ github.event.inputs.version }}" ]; then
            cp artifacts/zhub-build-${{ github.run_number }}.tar.gz artifacts/zhub-release-${{ github.event.inputs.version }}.tar.gz
          fi
          
      # Upload the artifact (this happens every time the workflow runs)
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: zhub-build-${{ github.run_number }}.tar.gz
          path: artifacts/zhub-build-${{ github.run_number }}.tar.gz

      # Upload release artifact (only if version is provided)
      - name: Upload release artifact
        if: ${{ github.event.inputs.version != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: zhub-release-${{ github.event.inputs.version }}.tar.gz
          path: artifacts/zhub-release-${{ github.event.inputs.version }}.tar.gz

      # If the version was provided, create a GitHub release
      - name: Create GitHub release (if version is provided)
        if: ${{ github.event.inputs.version != '' }}
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/zhub-release-${{ github.event.inputs.version }}.tar.gz
          tag_name: "v${{ env.VERSION }}"
          body: |
            # Changes:
            ${{ env.COMMITS }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to GitHub Pages
        run: |
          cp -r ./artifacts ../artifacts
          rm -rf artifacts

          # Remove existing symbolic links if they exist
          rm -f ./downloads/latest/build
          if [ "${{ github.event.inputs.version }}" ]; then
            rm -f ./downloads/latest/release
          fi

          # Fetch the existing gh-pages branch
          git fetch --depth=1 origin gh-pages
          git checkout gh-pages
          
          if [ -f index.html ]; then
            echo "index.html found"
          else
            echo "index.html not found"
            exit 1
          fi
          
          if [ -f template.html ]; then
            echo "template.html found"
          else
            echo "template.html not found"
            exit 1
          fi
          
          cp -f template.html index.html

          mkdir -p downloads/latest

          # Copy artifacts into the downloads folder
          cp ../artifacts/* ./downloads/

          # Create symbolic links for the latest release and build
          ln -sf ../zhub-build-${{ github.run_number }}.tar.gz ./downloads/latest/build
          if [ "${{ github.event.inputs.version }}" ]; then
            ln -sf ../zhub-release-${{ github.event.inputs.version }}.tar.gz ./downloads/latest/release
          fi
          
          # Ensure there are only a maximum of 100 tar build files
          build_files=( $(ls -t downloads/*build*.tar.gz) )
          if [ ${#build_files[@]} -gt 100 ]; then
            files_to_remove=( ${build_files[@]:100} )
            for file in "${files_to_remove[@]}"; do
              rm -f "$file"
            done
          fi

          build_links=$(for f in $(ls -t downloads/*build*.tar.gz); do echo "<li><a href=\"$f\">$(basename "$f")</a></li>"; done | tr '\n' ' ')
          release_links=$(for f in $(ls -t downloads/*release*.tar.gz); do echo "<li><a href=\"$f\">$(basename "$f")</a></li>"; done | tr '\n' ' ')
          # Update the file using sed
          sed -i 's|<!-- CD BUILDS HERE -->|'"$build_links"'|' index.html
          sed -i 's|<!-- CD RELEASES HERE -->|'"$release_links"'|' index.html

          # Commit and push changes
          git add .
          git commit -m "Deploy artifacts to downloads folder and update index.html [skip ci]" || echo "No changes to commit"
          git push origin gh-pages

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

