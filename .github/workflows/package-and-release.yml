name: Update VERSION file and package release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+" # only v1.23.45 format tags

permissions:
  contents: write

jobs:
  update_version_and_package:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Extract the version from the tag
      - name: Extract version from tag
        id: extract_version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "VERSION=$VERSION" >> $GITHUB_ENV
          else
            echo "This workflow should be triggered by a tag."
            exit 1
          fi

      # Update the VERSION file
      - name: Update VERSION file
        run: |
          echo "${VERSION#v}" > VERSION
          cat VERSION

      # Commit changes and move the tag
      - name: Commit changes and move tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git fetch --tags
          git tag
          if [ -n "$(git status --porcelain)" ]; then
            git add VERSION
            git commit -m "Update VERSION file to $VERSION"
            git push origin HEAD:refs/heads/master
            git tag -d $VERSION
            git tag $VERSION
            git push origin $VERSION --force
          else
            echo "No changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Get release tags
      - name: Get previous release tag
        id: get_previous_release
        run: |
          git fetch --all
          git fetch --tags --force
          # Get the latest tag
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          
          # Get the previous tag
          PREVIOUS_TAG=$(git tag --sort=version:refname | grep -B 1 "$LATEST_TAG" | head -n 1)
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV

      # Step 6: Get commits since the last release
      - name: Get commits
        id: get_commits
        run: |
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found. Showing all commits."
            COMMITS=$(git log --pretty=format:"- %h: %s")
          elif [ "$PREVIOUS_TAG" == "$LATEST_TAG" ]; then
            echo "Previous and latest tags are the same. Showing all commits."
            COMMITS=$(git log --pretty=format:"- %h: %s")
          else
            echo "Fetching commits between $PREVIOUS_TAG and $LATEST_TAG."
            COMMITS=$(git log $PREVIOUS_TAG..$LATEST_TAG --pretty=format:"- %h: %s")
          fi
          if [ -z "$COMMITS" ]; then
            COMMITS="No commits found since the last release."
          fi
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Create a tar.gz package
      - name: Package the repository
        run: |
          mkdir -p build
          tar -czvf build/zhub.tar.gz --exclude='.git*' .

      # Create GitHub release
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: build/zhub.tar.gz
          body: |
            # Changes:
            ${{ env.COMMITS }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}