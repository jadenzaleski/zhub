# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Get previous release tag
        id: get_previous_release
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git fetch --tags
          git tag
          # Get the latest tag
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          
          # Find the previous tag by listing tags and filtering the one before the current tag
          PREVIOUS_TAG=$(git tag --sort=version:refname | grep -B 1 "$LATEST_TAG" | head -n 1)
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV

      - name: Get commits
        id: get_commits
        run: |
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found. Showing all commits."
            COMMITS=$(git log --pretty=format:"- %h: %s")
          elif [ "$PREVIOUS_TAG" == "$LATEST_TAG" ]; then
            echo "Previous and latest tags are the same. Showing all commits."
            COMMITS=$(git log --pretty=format:"- %h: %s")
          else
            COMMITS=$(git log $PREVIOUS_TAG..$LATEST_TAG --pretty=format:"- %h: %s")
          fi
      
          if [ -z "$COMMITS" ]; then
            echo "No commits found."
          fi
      
          # Use EOF delimiter to avoid issues with special characters
          echo "COMMITS<<EOF" >> "$GITHUB_ENV"
          echo "$COMMITS" >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo ${{ env.COMMITS }}
